version: "3.9"
name: microservice-gateway-example

services:
  postgres-keycloak:
    container_name: postgres-keycloak
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      PGDATA: /data/postgres
    volumes:
      - postgres-db:/data/postgres
    expose:
      - "5432"

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_HOSTNAME: localhost
      KC_DB_PASSWORD: admin
      KC_DB_USERNAME: admin
      KC_DB_URL: jdbc:postgresql://postgres-keycloak:5432/keycloak
      KC_DB_URL_PORT: 5432
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "18080:8080"
    volumes:
      - ./keycloak-exports:/opt/keycloak/data/import
      - ./scripts:/scripts
    command: ["start-dev", "--import-realm"]
    depends_on:
      - postgres-keycloak
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;" ]
      interval: 5s
      timeout: 5s
      retries: 5

  greeting-service:
    container_name: greeting-service
    build:
      context: ./greeting-service
    environment:
      KEYCLOAK_URI: http://localhost:8080
      KEYCLOAK_URI_INTERNAL: http://keycloak:8080
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 5s
    depends_on:
      keycloak:
        condition: service_healthy

  gateway:
    container_name: gateway
    build:
      context: ./gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_URI: http://localhost:18080
      KEYCLOAK_URI_INTERNAL: http://keycloak:8080
      GREETING-SERVICE-URI: http://greeting-service:8080
      GRANT_TYPE: client_credentials
      CLIENT_ID: microservice-auth
      CLIENT_SECRET: secret
      TOKEN_LIFESPAN: 5
      SCOPE: email
    depends_on:
      greeting-service:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 5s

volumes:
  postgres-db:
